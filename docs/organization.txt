* myshell

  ** Prompt
     *** Display prompt on stdout
     *** Accept command as string
     *** redisplay shell prompt
     *** Terminate with "exit"

  ** Terminator
     *** Kill Child processes
     *** kill parent proccess

  ** Parser
     *** Tokenize input string
     *** Store tokens in example structure

  ** Shell commands
     *** execv() appears to be our best option for executing shell commands

                            The following example passes arguments to the ls command in the cmd array.

                            #include <unistd.h>

                            int ret;
                            char *cmd[] = { "ls", "-l", (char *)0 };
                            ...
                            ret = execv ("/bin/ls", cmd);

     *** --debug option
         **** print contents of token structure with printParams()

  ** Redirection Handler
     *** input handler
     *** output handler

  ** Process Handler
     *** background execution
     *** forground execution


* Example Token Structure

/* don’t test program with more than this many tokens for input */

#define MAXARGS 32

/* structure to hold input data */

struct PARAM
{
  char *inputRedirect;            /* file name or NULL */
  char *outputRedirect;           /* file name or NULL */
  int  background;                /* either 0 (false) or 1 (true) */
  int  argumentCount;             /* number of tokens in argument vector */
  char *argumentVector[MAXARGS];  /* array of strings */
};

/* a typedef so we don’t need to use "struct PARAM" all the time */

typedef struct PARAM Param_t;


* Example printParams

void printParams(Param_t * param)
{
  int i;
  printf ("InputRedirect: [%s]\n",
         (param->inputRedirect != NULL) ? param->inputRedirect:"NULL");
  printf ("OutputRedirect: [%s]\n",
         (param->outputRedirect != NULL) ? param->outputRedirect:"NULL");
  printf ("Background: [%d]\n", param->background);
  printf ("ArgumentCount: [%d]\n", param->argumentCount);
  for (i = 0; i < param->argumentCount; i++)
      printf("ArgumentVector[%2d]: [%s]\n", i, param->argumentVector[i]);/* file name or NULL */
}


